(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * Oskari api documentation helper
 * Registers in global 'APIDOC' variable
 */
function navigation(selector) {

        var APIDOC = {};
        selector.on('change', function() {
            APIDOC.versionChanged(jQuery(this).val());
        });

        var bundleClickHandler = function() {
            var bundle = jQuery(this).data('path');
            APIDOC.showBundleDoc(selector.val(), bundle);
        };

        jQuery('li.bundlenavi').on('click', bundleClickHandler);

        var json = {};

        APIDOC.versionChanged = function(version) {
            if(json[version]) {
                APIDOC.renderNavigation(json[version]);
                return;
            }
            jQuery.ajax('/api/bundles.json', {
                data : {
                    version : version
                }
            }).done(function(response) {
                json[response.version] = response.api;
                APIDOC.renderNavigation(json[response.version]);
              })
              .fail(function() {
                alert( "error loading version info" );
              })
            //console.log('version changed:', version);
        };

        APIDOC.renderNavigation = function(json) {
            // remove the old navigation
            var navig = jQuery('#bundlenavi');
            navig.find('div.generated').remove();
            // setup new one
            jQuery.each( json, function( index, namespace ) {
                var panel = getPanel(namespace.name, namespace.bundles);
                navig.append(panel);
            });
            // reset to changelog
            APIDOC.showBundleDoc(selector.val());
        };

        var naviTemplate = jQuery('<div class="panel panel-default generated">'
            + '<div class="panel-heading"></div>'
            + '<div class="panel-body"><ul></ul></div>'
         +'</div>');
        var bundleItemTemplate = jQuery('<li data-path="path/to/bundle" class="bundlenavi"></li>');

        var getPanel = function(namespace, bundles) {
            var panel = naviTemplate.clone();
            panel.find('div.panel-heading').append(namespace);
            var list = panel.find('ul');
            bundles.forEach(function(bundle) {
                var item = bundleItemTemplate.clone();
                item.attr('data-path', bundle.path);
                item.attr('title', bundle.desc);
                item.append(bundle.name);
                item.on('click', bundleClickHandler);
                list.append(item);
            });
            return panel;
        };
        var fixCodeHighlights = function() {
            jQuery('pre code').each(function(i, block) {
                hljs.highlightBlock(block);
            });
        };

        APIDOC.showBundleDoc = function(version, bundle) {
            var url = '/apidoc/' + version + '/' + (bundle || '');
            jQuery('#bundlecontent').load( url, function() {
                fixCodeHighlights();
            });
        }
        return APIDOC;
    }

module.exports = navigation;

},{}],2:[function(require,module,exports){
/**
 * Oskari api documentation helper
 * Registers in global 'APIDOC' variable
 */
function navigation(selector) {

        var APIDOC = {};
        selector.on('change', function() {
            APIDOC.versionChanged(jQuery(this).val());
        });

        var bundleClickHandler = function() {
            var bundle = jQuery(this).data('path');
            APIDOC.showBundleDoc(selector.val(), bundle);
        };

        jQuery('li.eventnavi').on('click', bundleClickHandler);

        var filterNavigation = function(onlyRPC) {
            if(onlyRPC) {
                jQuery('li.eventnavi[data-rpc="false"]').hide();
            }
            else {
                jQuery('li.eventnavi').show();
            }
        };

        jQuery('#rpc-filter').change(function() {
            filterNavigation(this.checked);
        });

        var json = {};

        APIDOC.versionChanged = function(version) {
            if(json[version]) {
                APIDOC.renderNavigation(json[version]);
                return;
            }
            jQuery.ajax('/api/events.json', {
                data : {
                    version : version
                }
            }).done(function(response) {
                json[response.version] = response.api;
                APIDOC.renderNavigation(json[response.version]);
              })
              .fail(function() {
                alert( "error loading version info" );
              })
            //console.log('version changed:', version);
        };

        APIDOC.renderNavigation = function(json) {
            // remove the old navigation
            var navig = jQuery('#bundlenavi');
            navig.find('div.generated').remove();
            // setup new one
            var panel = getPanel('Events', json);
            navig.append(panel);
            // reset to changelog
            APIDOC.showBundleDoc(selector.val());
        };

        var naviTemplate = jQuery('<div class="panel panel-default generated">'
            + '<div class="panel-heading"></div>'
            + '<div class="panel-body"><ul></ul></div>'
         +'</div>');
        var bundleItemTemplate = jQuery('<li data-path="path/to/bundle" class="eventnavi"></li>');

        var getPanel = function(namespace, requests) {
            var panel = naviTemplate.clone();
            panel.find('div.panel-heading').append(namespace);
            var list = panel.find('ul');
            requests.forEach(function(req) {
                var item = bundleItemTemplate.clone();
                item.attr('data-path', req.path);
                item.attr('data-rpc', req.rpc);
                item.attr('title', req.desc);
                item.append(req.name);
                item.on('click', bundleClickHandler);
                list.append(item);
            });
            return panel;
        };
        var fixCodeHighlights = function() {
            jQuery('pre code').each(function(i, block) {
                hljs.highlightBlock(block);
            });
        };

        APIDOC.showBundleDoc = function(version, bundle) {
            var url = '/apidoc/' + version + '/' + (bundle || '');
            jQuery('#bundlecontent').load( url, function() {
                fixCodeHighlights();
            });
        }
        return APIDOC;
    }

module.exports = navigation;

},{}],3:[function(require,module,exports){
/**
 * Oskari api documentation helper
 * Registers in global 'APIDOC' variable
 */
function navigation(selector) {

        var APIDOC = {};
        selector.on('change', function() {
            APIDOC.versionChanged(jQuery(this).val());
        });

        var bundleClickHandler = function() {
            var bundle = jQuery(this).data('path');
            APIDOC.showBundleDoc(selector.val(), bundle);
        };

        jQuery('li.requestnavi').on('click', bundleClickHandler);

        var filterNavigation = function(onlyRPC) {
            if(onlyRPC) {
                jQuery('li.requestnavi[data-rpc="false"]').hide();
            }
            else {
                jQuery('li.requestnavi').show();
            }
        };

        jQuery('#rpc-filter').change(function() {
            filterNavigation(this.checked);
        });

        var json = {};

        APIDOC.versionChanged = function(version) {
            if(json[version]) {
                APIDOC.renderNavigation(json[version]);
                return;
            }
            jQuery.ajax('/api/requests.json', {
                data : {
                    version : version
                }
            }).done(function(response) {
                json[response.version] = response.api;
                APIDOC.renderNavigation(json[response.version]);
              })
              .fail(function() {
                alert( "error loading version info" );
              })
            //console.log('version changed:', version);
        };

        APIDOC.renderNavigation = function(json) {
            // remove the old navigation
            var navig = jQuery('#bundlenavi');
            navig.find('div.generated').remove();
            // setup new one
            var panel = getPanel('Requests', json);
            navig.append(panel);
            // reset to changelog
            APIDOC.showBundleDoc(selector.val());
        };

        var naviTemplate = jQuery('<div class="panel panel-default generated">'
            + '<div class="panel-heading"></div>'
            + '<div class="panel-body"><ul></ul></div>'
         +'</div>');
        var bundleItemTemplate = jQuery('<li data-path="path/to/bundle" class="requestnavi"></li>');

        var getPanel = function(namespace, requests) {
            var panel = naviTemplate.clone();
            panel.find('div.panel-heading').append(namespace);
            var list = panel.find('ul');
            requests.forEach(function(req) {
                var item = bundleItemTemplate.clone();
                item.attr('data-path', req.path);
                item.attr('data-rpc', req.rpc);
                item.attr('title', req.desc);
                item.append(req.name);
                item.on('click', bundleClickHandler);
                list.append(item);
            });
            return panel;
        };
        var fixCodeHighlights = function() {
            jQuery('pre code').each(function(i, block) {
                hljs.highlightBlock(block);
            });
        };

        APIDOC.showBundleDoc = function(version, bundle) {
            var url = '/apidoc/' + version + '/' + (bundle || '');
            jQuery('#bundlecontent').load( url, function() {
                fixCodeHighlights();
            });
        }
        return APIDOC;
    }

module.exports = navigation;

},{}],4:[function(require,module,exports){

(function () {
    var selector = jQuery('#version-selector');
    /*
    if(!selector.length) {
        return;
    }
    */
    var bundleNavi = require('./apidoc_bundle');
    var type = selector.attr('data-type');
    if(type === 'bundles') {
        bundleNavi(selector);
    } else if(type === 'requests') {
        var requestNavi = require('./apidoc_request');
        requestNavi(selector);
    } else if(type === 'events') {
        var eventNavi = require('./apidoc_event');
        eventNavi(selector);
    }
})();

/**
 * Oskari api documentation helper
 * Registers in global 'APIDOC' variable
 */
function navigation(selector) {

        var APIDOC = {};
        selector.on('change', function() {
            APIDOC.versionChanged(jQuery(this).val());
        });

        var bundleClickHandler = function() {
            var bundle = jQuery(this).data('path');
            APIDOC.showBundleDoc(selector.val(), bundle);
        };

        jQuery('li.bundlenavi').on('click', bundleClickHandler);

        var json = {};

        APIDOC.versionChanged = function(version) {
            if(json[version]) {
                APIDOC.renderNavigation(json[version]);
                return;
            }
            jQuery.ajax('/api/bundles.json', {
                data : {
                    version : version
                }
            }).done(function(response) {
                json[response.version] = response.api;
                APIDOC.renderNavigation(json[response.version]);
              })
              .fail(function() {
                alert( "error loading version info" );
              })
            //console.log('version changed:', version);
        };

        APIDOC.renderNavigation = function(json) {
            // remove the old navigation
            var navig = jQuery('#bundlenavi');
            navig.find('div.generated').remove();
            // setup new one
            jQuery.each( json, function( index, namespace ) {
                var panel = getPanel(namespace.name, namespace.bundles);
                navig.append(panel);
            });
            // reset to changelog
            APIDOC.showBundleDoc(selector.val());
        };

        var naviTemplate = jQuery('<div class="panel panel-default generated">'
            + '<div class="panel-heading"></div>'
            + '<div class="panel-body"><ul></ul></div>'
         +'</div>');
        var bundleItemTemplate = jQuery('<li data-path="path/to/bundle" class="bundlenavi"></li>');

        var getPanel = function(namespace, bundles) {
            var panel = naviTemplate.clone();
            panel.find('div.panel-heading').append(namespace);
            var list = panel.find('ul');
            bundles.forEach(function(bundle) {
                var item = bundleItemTemplate.clone();
                item.attr('data-path', bundle.path);
                item.attr('title', bundle.desc);
                item.append(bundle.name);
                item.on('click', bundleClickHandler);
                list.append(item);
            });
            return panel;
        };
        var fixCodeHighlights = function() {
            jQuery('pre code').each(function(i, block) {
                hljs.highlightBlock(block);
            });
        };

        APIDOC.showBundleDoc = function(version, bundle) {
            var url = '/apidoc/' + version + '/' + (bundle || '');
            jQuery('#bundlecontent').load( url, function() {
                fixCodeHighlights();
            });
        }
        return APIDOC;
    }

module.exports = navigation;

/**
 * Oskari api documentation helper
 * Registers in global 'APIDOC' variable
 */
function navigation(selector) {

        var APIDOC = {};
        selector.on('change', function() {
            APIDOC.versionChanged(jQuery(this).val());
        });

        var bundleClickHandler = function() {
            var bundle = jQuery(this).data('path');
            APIDOC.showBundleDoc(selector.val(), bundle);
        };

        jQuery('li.eventnavi').on('click', bundleClickHandler);

        var filterNavigation = function(onlyRPC) {
            if(onlyRPC) {
                jQuery('li.eventnavi[data-rpc="false"]').hide();
            }
            else {
                jQuery('li.eventnavi').show();
            }
        };

        jQuery('#rpc-filter').change(function() {
            filterNavigation(this.checked);
        });

        var json = {};

        APIDOC.versionChanged = function(version) {
            if(json[version]) {
                APIDOC.renderNavigation(json[version]);
                return;
            }
            jQuery.ajax('/api/events.json', {
                data : {
                    version : version
                }
            }).done(function(response) {
                json[response.version] = response.api;
                APIDOC.renderNavigation(json[response.version]);
              })
              .fail(function() {
                alert( "error loading version info" );
              })
            //console.log('version changed:', version);
        };

        APIDOC.renderNavigation = function(json) {
            // remove the old navigation
            var navig = jQuery('#bundlenavi');
            navig.find('div.generated').remove();
            // setup new one
            var panel = getPanel('Events', json);
            navig.append(panel);
            // reset to changelog
            APIDOC.showBundleDoc(selector.val());
        };

        var naviTemplate = jQuery('<div class="panel panel-default generated">'
            + '<div class="panel-heading"></div>'
            + '<div class="panel-body"><ul></ul></div>'
         +'</div>');
        var bundleItemTemplate = jQuery('<li data-path="path/to/bundle" class="eventnavi"></li>');

        var getPanel = function(namespace, requests) {
            var panel = naviTemplate.clone();
            panel.find('div.panel-heading').append(namespace);
            var list = panel.find('ul');
            requests.forEach(function(req) {
                var item = bundleItemTemplate.clone();
                item.attr('data-path', req.path);
                item.attr('data-rpc', req.rpc);
                item.attr('title', req.desc);
                item.append(req.name);
                item.on('click', bundleClickHandler);
                list.append(item);
            });
            return panel;
        };
        var fixCodeHighlights = function() {
            jQuery('pre code').each(function(i, block) {
                hljs.highlightBlock(block);
            });
        };

        APIDOC.showBundleDoc = function(version, bundle) {
            var url = '/apidoc/' + version + '/' + (bundle || '');
            jQuery('#bundlecontent').load( url, function() {
                fixCodeHighlights();
            });
        }
        return APIDOC;
    }

module.exports = navigation;

/**
 * Oskari api documentation helper
 * Registers in global 'APIDOC' variable
 */
function navigation(selector) {

        var APIDOC = {};
        selector.on('change', function() {
            APIDOC.versionChanged(jQuery(this).val());
        });

        var bundleClickHandler = function() {
            var bundle = jQuery(this).data('path');
            APIDOC.showBundleDoc(selector.val(), bundle);
        };

        jQuery('li.requestnavi').on('click', bundleClickHandler);

        var filterNavigation = function(onlyRPC) {
            if(onlyRPC) {
                jQuery('li.requestnavi[data-rpc="false"]').hide();
            }
            else {
                jQuery('li.requestnavi').show();
            }
        };

        jQuery('#rpc-filter').change(function() {
            filterNavigation(this.checked);
        });

        var json = {};

        APIDOC.versionChanged = function(version) {
            if(json[version]) {
                APIDOC.renderNavigation(json[version]);
                return;
            }
            jQuery.ajax('/api/requests.json', {
                data : {
                    version : version
                }
            }).done(function(response) {
                json[response.version] = response.api;
                APIDOC.renderNavigation(json[response.version]);
              })
              .fail(function() {
                alert( "error loading version info" );
              })
            //console.log('version changed:', version);
        };

        APIDOC.renderNavigation = function(json) {
            // remove the old navigation
            var navig = jQuery('#bundlenavi');
            navig.find('div.generated').remove();
            // setup new one
            var panel = getPanel('Requests', json);
            navig.append(panel);
            // reset to changelog
            APIDOC.showBundleDoc(selector.val());
        };

        var naviTemplate = jQuery('<div class="panel panel-default generated">'
            + '<div class="panel-heading"></div>'
            + '<div class="panel-body"><ul></ul></div>'
         +'</div>');
        var bundleItemTemplate = jQuery('<li data-path="path/to/bundle" class="requestnavi"></li>');

        var getPanel = function(namespace, requests) {
            var panel = naviTemplate.clone();
            panel.find('div.panel-heading').append(namespace);
            var list = panel.find('ul');
            requests.forEach(function(req) {
                var item = bundleItemTemplate.clone();
                item.attr('data-path', req.path);
                item.attr('data-rpc', req.rpc);
                item.attr('title', req.desc);
                item.append(req.name);
                item.on('click', bundleClickHandler);
                list.append(item);
            });
            return panel;
        };
        var fixCodeHighlights = function() {
            jQuery('pre code').each(function(i, block) {
                hljs.highlightBlock(block);
            });
        };

        APIDOC.showBundleDoc = function(version, bundle) {
            var url = '/apidoc/' + version + '/' + (bundle || '');
            jQuery('#bundlecontent').load( url, function() {
                fixCodeHighlights();
            });
        }
        return APIDOC;
    }

module.exports = navigation;

$(function () {
    var addActiveClassToNav = function () {
        var pathName = document.location.pathname,
            activePath = pathName.split('/')[1],
            activeNavLink = $('nav ul li a[href="/' + activePath + '"]');

        $('nav ul li').removeClass('active');
        activeNavLink.parent().addClass('active');
    };

    addActiveClassToNav();
    hljs.initHighlightingOnLoad();
    $('table.oskari-sortable').stupidtable();
    $('.menu-icon').click(function () {
        $('nav').toggleClass('active');
    });
});

},{"./apidoc_bundle":1,"./apidoc_event":2,"./apidoc_request":3}]},{},[4])